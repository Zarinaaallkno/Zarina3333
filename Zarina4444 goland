package main

import (
    "fmt"
    "math/rand"
    "strings"
    "time"
)

func atbashCipher(text string) string {
    alphabet := "abcdefghijklmnopqrstuvwxyz"
    result := ""
    for _, char := range text {
        lowerChar := strings.ToLower(string(char))
        if strings.Contains(alphabet, lowerChar) {
            index := strings.Index(alphabet, lowerChar)
            result += string(alphabet[25-index])
        } else {
            result += string(char)
        }
    }
    return result
}

func enigmaCipher(text string, rotors []int) string {
    alphabet := "abcdefghijklmnopqrstuvwxyz"
    result := ""
    for _, char := range text {
        lowerChar := strings.ToLower(string(char))
        if strings.Contains(alphabet, lowerChar) {
            index := strings.Index(alphabet, lowerChar)
            for _, rotor := range rotors {
                index = (index + rotor) % len(alphabet)
            }
            result += string(alphabet[index])
        } else {
            result += string(char)
        }
    }
    return result
}

func combinedCipher(text string) string {
    rand.Seed(time.Now().UnixNano()) // Инициализация генератора случайных чисел

    rotors := make([]int, 3)
    for i := 0; i < 3; i++ {
        rotors[i] = rand.Intn(26) // Генерация случайных чисел от 0 до 25
    }

    encryptedText := atbashCipher(text)
    encryptedText = enigmaCipher(encryptedText, rotors)

    // Добавить логику для бинарного поиска по зашифрованному тексту
    // ...

    return encryptedText
}

func main() {
    text := "Hello world!"
    encryptedText := combinedCipher(text)
    fmt.Printf("Зашифрованный текст: %s\n", encryptedText) // Вывод: Например, 'Qjcmf ykvhf!'
}
